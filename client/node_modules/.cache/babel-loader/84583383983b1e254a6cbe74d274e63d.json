{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport { useShoppingCart } from \"use-shopping-cart\";\nexport default function Cart() {} // \tconst [products, setProducts] = useState([]);\n// \tconst [cartItems, setCartItems] = useState([]);\n// \tuseEffect(() => {\n// \t\tretrieveTutorials();\n// \t}, []);\n// \tconst retrieveTutorials = () => {\n// \t\tTutorialDataService.getAll()\n// \t\t\t.then((response) => {\n// \t\t\t\tsetProducts(response.data);\n// \t\t\t\tconsole.log(response.data);\n// \t\t\t})\n// \t\t\t.catch((e) => {\n// \t\t\t\tconsole.log(e);\n// \t\t\t});\n// \t};\n// \tconst onAdd = (products) => {\n// \t\tconst exist = cartItems.find((x) => x._id === products._id);\n// \t\tif (exist) {\n// \t\t\tsetCartItems(\n// \t\t\t\tcartItems.map((x) =>\n// \t\t\t\t\tx._id === products._id ? { ...exist, qty: exist.qty + 1 } : x\n// \t\t\t\t)\n// \t\t\t);\n// \t\t} else {\n// \t\t\tsetCartItems([...cartItems, { ...products, qty: 1 }]);\n// \t\t}\n// \t};\n// \treturn (\n// \t\t<div>\n// \t\t\t<h2>Products</h2>\n// \t\t\t<div>\n// \t\t\t\t{cartItems.map((product) => (\n// \t\t\t\t\t<h3>{cartItems.name}</h3>\n// \t\t\t\t))}\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n\n_c = Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"sources":["/Users/alexdegregori/Projects/module-1/Kook-Shop/client/src/components/Cart.js"],"names":["React","useState","useEffect","useShoppingCart","Cart"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,eAAe,SAASC,IAAT,GAAgB,CAAE,C,CAEjC;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;KA3CwBA,I","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useShoppingCart } from \"use-shopping-cart\";\n\nexport default function Cart() {}\n\n// \tconst [products, setProducts] = useState([]);\n// \tconst [cartItems, setCartItems] = useState([]);\n\n// \tuseEffect(() => {\n// \t\tretrieveTutorials();\n// \t}, []);\n\n// \tconst retrieveTutorials = () => {\n// \t\tTutorialDataService.getAll()\n// \t\t\t.then((response) => {\n// \t\t\t\tsetProducts(response.data);\n// \t\t\t\tconsole.log(response.data);\n// \t\t\t})\n// \t\t\t.catch((e) => {\n// \t\t\t\tconsole.log(e);\n// \t\t\t});\n// \t};\n\n// \tconst onAdd = (products) => {\n// \t\tconst exist = cartItems.find((x) => x._id === products._id);\n// \t\tif (exist) {\n// \t\t\tsetCartItems(\n// \t\t\t\tcartItems.map((x) =>\n// \t\t\t\t\tx._id === products._id ? { ...exist, qty: exist.qty + 1 } : x\n// \t\t\t\t)\n// \t\t\t);\n// \t\t} else {\n// \t\t\tsetCartItems([...cartItems, { ...products, qty: 1 }]);\n// \t\t}\n// \t};\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<h2>Products</h2>\n\n// \t\t\t<div>\n// \t\t\t\t{cartItems.map((product) => (\n// \t\t\t\t\t<h3>{cartItems.name}</h3>\n// \t\t\t\t))}\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n"]},"metadata":{},"sourceType":"module"}