{"ast":null,"code":"import * as React from 'react';\nimport { createSlice, configureStore, bindActionCreators } from '@reduxjs/toolkit';\nimport { v4 } from 'uuid';\nimport { persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER, persistStore } from 'redux-persist';\nimport '@stripe/stripe-js';\nimport { createSelectorHook, createDispatchHook, Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nconst isClient = typeof window === 'object';\n\nconst formatCurrencyString = _ref => {\n  let {\n    value,\n    currency,\n    language = isClient ? navigator.language : 'en-US'\n  } = _ref;\n  const numberFormat = new Intl.NumberFormat(language, {\n    style: 'currency',\n    currency,\n    currencyDisplay: 'symbol'\n  });\n  const parts = numberFormat.formatToParts(value);\n  let zeroDecimalCurrency = true;\n\n  for (const part of parts) {\n    if (part.type === 'decimal') {\n      zeroDecimalCurrency = false;\n      break;\n    }\n  }\n\n  value = zeroDecimalCurrency ? value : parseFloat((value / 100).toFixed(2));\n  return numberFormat.format(value);\n};\n\nfunction updateFormattedTotalPrice(state) {\n  state.formattedTotalPrice = formatCurrencyString({\n    value: state.totalPrice,\n    currency: state.currency,\n    language: state.language\n  });\n}\n\nfunction updateFormattedValue(state, id) {\n  state.cartDetails[id].formattedValue = formatCurrencyString({\n    value: state.cartDetails[id].value,\n    currency: state.currency,\n    language: state.language\n  });\n}\n\nfunction updateFormattedPrice(state, id) {\n  state.cartDetails[id].formattedPrice = formatCurrencyString({\n    value: state.cartDetails[id].price,\n    currency: state.currency,\n    language: state.language\n  });\n}\n\nfunction Entry(_ref2) {\n  let {\n    id,\n    product,\n    quantity,\n    price_metadata,\n    product_metadata\n  } = _ref2;\n  return { ...product,\n    id,\n    quantity,\n    value: product.price * quantity,\n    price_data: { ...product.price_data,\n      ...price_metadata\n    },\n    product_data: { ...product.product_data,\n      ...product_metadata\n    }\n  };\n}\n\nfunction createEntry(_ref3) {\n  let {\n    state,\n    id,\n    product,\n    count,\n    price_metadata,\n    product_metadata\n  } = _ref3;\n  const entry = Entry({\n    id,\n    product,\n    quantity: count,\n    price_metadata,\n    product_metadata\n  });\n  state.cartDetails[id] = entry;\n  updateFormattedValue(state, id);\n  updateFormattedPrice(state, id);\n  state.totalPrice += entry.value;\n  state.cartCount += count;\n  updateFormattedTotalPrice(state);\n}\n\nfunction updateEntry(_ref4) {\n  let {\n    state,\n    id,\n    count,\n    price_metadata,\n    product_metadata\n  } = _ref4;\n  const entry = state.cartDetails[id];\n  if (entry.quantity + count <= 0) return removeEntry({\n    state,\n    id\n  });\n  state.cartDetails[id] = Entry({\n    id,\n    state,\n    product: entry,\n    quantity: entry.quantity + count,\n    price_metadata,\n    product_metadata\n  });\n  updateFormattedValue(state, id);\n  state.totalPrice += entry.price * count;\n  state.cartCount += count;\n  updateFormattedTotalPrice(state);\n}\n\nfunction removeEntry(_ref5) {\n  let {\n    state,\n    id\n  } = _ref5;\n  const cartDetails = state.cartDetails;\n  state.totalPrice -= cartDetails[id].value;\n  state.cartCount -= cartDetails[id].quantity;\n  delete cartDetails[id];\n  updateFormattedTotalPrice(state);\n}\n\nfunction updateQuantity(_ref6) {\n  let {\n    state,\n    id,\n    quantity\n  } = _ref6;\n  const entry = state.cartDetails[id];\n  updateEntry({\n    state,\n    id,\n    count: quantity - entry.quantity\n  });\n}\n\nconst initialState = {\n  cartMode: 'checkout-session',\n  mode: 'payment',\n  currency: 'USD',\n  language: isClient ? navigator.language : 'en-US',\n  lastClicked: '',\n  shouldDisplayCart: false,\n  cartCount: 0,\n  totalPrice: 0,\n  formattedTotalPrice: '',\n  cartDetails: {},\n  stripe: ''\n};\nconst slice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addItem: {\n      reducer(state, _ref7) {\n        let {\n          payload: {\n            product,\n            options\n          }\n        } = _ref7;\n        const {\n          count,\n          price_metadata,\n          product_metadata\n        } = options;\n        const id = product.id || product.price_id || product.sku_id || product.sku || v4();\n\n        if (id in state.cartDetails) {\n          updateEntry({\n            state,\n            id,\n            count,\n            price_metadata,\n            product_metadata\n          });\n        } else {\n          createEntry({\n            state,\n            id,\n            product,\n            count,\n            price_metadata,\n            product_metadata\n          });\n        }\n      },\n\n      prepare(product) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n          count: 1\n        };\n        if (!options.price_metadata) options.price_metadata = {};\n        if (!options.product_metadata) options.product_metadata = {};\n        if (!options.count) options.count = 1;\n        return {\n          payload: {\n            product,\n            options\n          }\n        };\n      }\n\n    },\n    incrementItem: {\n      reducer(state, _ref8) {\n        let {\n          payload: {\n            id,\n            options\n          }\n        } = _ref8;\n        updateEntry({\n          state,\n          id,\n          count: options.count\n        });\n      },\n\n      prepare(id) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n          count: 1\n        };\n        return {\n          payload: {\n            id,\n            options\n          }\n        };\n      }\n\n    },\n    decrementItem: {\n      reducer(state, _ref9) {\n        let {\n          payload: {\n            id,\n            options\n          }\n        } = _ref9;\n        if (state.cartDetails[id].quantity - options.count <= 0) return removeEntry({\n          state,\n          id\n        });\n        updateEntry({\n          state,\n          id,\n          count: -options.count\n        });\n      },\n\n      prepare(id) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n          count: 1\n        };\n        return {\n          payload: {\n            id,\n            options\n          }\n        };\n      }\n\n    },\n    clearCart: {\n      reducer(state) {\n        state.cartCount = 0;\n        state.totalPrice = 0;\n        state.cartDetails = {};\n        updateFormattedTotalPrice(state);\n      }\n\n    },\n    setItemQuantity: {\n      reducer(state, _ref10) {\n        let {\n          payload: {\n            id,\n            quantity\n          }\n        } = _ref10;\n        if (quantity > 0 && id in state.cartDetails) return updateQuantity({ ...state,\n          state,\n          id,\n          quantity\n        });else if (quantity === 0) return removeEntry({\n          state,\n          id\n        });\n      },\n\n      prepare(id, quantity) {\n        return {\n          payload: {\n            id,\n            quantity\n          }\n        };\n      }\n\n    },\n    removeItem: {\n      reducer(state, _ref11) {\n        let {\n          payload: {\n            id\n          }\n        } = _ref11;\n        removeEntry({\n          state,\n          id\n        });\n      },\n\n      prepare(id) {\n        return {\n          payload: {\n            id\n          }\n        };\n      }\n\n    },\n    loadCart: {\n      reducer(state, _ref12) {\n        let {\n          payload: {\n            cartDetails,\n            shouldMerge\n          }\n        } = _ref12;\n\n        if (!shouldMerge) {\n          state.cartCount = 0;\n          state.totalPrice = 0;\n          state.cartDetails = {};\n        }\n\n        for (const id in cartDetails) {\n          const entry = cartDetails[id];\n          createEntry({\n            state,\n            id: entry.id,\n            product: entry,\n            count: entry.quantity\n          });\n        }\n      },\n\n      prepare(cartDetails) {\n        let shouldMerge = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n        return {\n          payload: {\n            cartDetails,\n            shouldMerge\n          }\n        };\n      }\n\n    },\n\n    handleCartHover(state) {\n      state.shouldDisplayCart = true;\n    },\n\n    handleCartClick(state) {\n      state.shouldDisplayCart = !state.shouldDisplayCart;\n    },\n\n    handleCloseCart(state) {\n      state.shouldDisplayCart = false;\n    },\n\n    storeLastClicked(state, _ref13) {\n      let {\n        payload\n      } = _ref13;\n      state.lastClicked = payload;\n    },\n\n    changeStripeKey(state, _ref14) {\n      let {\n        payload\n      } = _ref14;\n      state.stripe = payload;\n    },\n\n    changeLanguage(state, _ref15) {\n      let {\n        payload\n      } = _ref15;\n      state.language = payload;\n    },\n\n    changeCurrency(state, _ref16) {\n      let {\n        payload\n      } = _ref16;\n      state.currency = payload;\n    }\n\n  }\n});\n\nslice.actions.redirectToCheckout = sessionId => ({\n  type: 'cart/redirectToCheckout',\n  payload: {\n    sessionId\n  }\n});\n\nslice.actions.checkoutSingleItem = itemsOrPriceId => {\n  const quantity = itemsOrPriceId.quantity || 1;\n\n  const cartItems = (() => {\n    if (typeof itemsOrPriceId === 'string') {\n      return {\n        lineItems: [{\n          price: itemsOrPriceId,\n          quantity\n        }]\n      };\n    }\n\n    if (Object.prototype.hasOwnProperty.call(itemsOrPriceId, 'price')) {\n      return {\n        lineItems: [{\n          price: itemsOrPriceId.price,\n          quantity\n        }]\n      };\n    }\n    /**\r\n     * Backward compatibility (SKU)\r\n     */\n\n\n    if (Object.prototype.hasOwnProperty.call(itemsOrPriceId, 'sku')) {\n      return {\n        items: [{\n          sku: itemsOrPriceId.sku,\n          quantity\n        }]\n      };\n    }\n\n    return [];\n  })();\n\n  return {\n    type: 'cart/checkoutSingleItem',\n    payload: {\n      cartItems\n    }\n  };\n};\n\nconst {\n  reducer,\n  actions\n} = slice;\n/**\r\n * Returns the constructor name of any value.\r\n * @param {any} value\r\n * @returns string\r\n */\n\nfunction typeOf(value) {\n  if (value === undefined) return 'undefined';\n  if (value === null) return 'null';\n  return value.constructor.name;\n}\n\nclass PropertyValueError extends Error {\n  constructor(_ref17) {\n    let {\n      property,\n      method,\n      expected,\n      received\n    } = _ref17;\n    const plural = Array.isArray(expected);\n    const expectedString = plural ? `are ${expected.map(v => JSON.stringify(v)).join(', ')}` : `is ${JSON.stringify(expected)}`;\n    const methodString = typeof method === 'string' ? ` in ${method}()` : '';\n    super(`Invalid value ${JSON.stringify(received)} was received for ${property}. Valid ${plural ? 'values' : 'value'} for ${property}${methodString} ${expectedString}.`);\n    this.name = 'PropertyValueError';\n  }\n\n}\n\nclass PropertyTypeError extends TypeError {\n  constructor(_ref18) {\n    let {\n      property,\n      expected,\n      received\n    } = _ref18;\n    const plural = Array.isArray(expected);\n    const expectedString = plural ? `are ${expected.map(v => JSON.stringify(v)).join(', ')}` : `is ${JSON.stringify(expected)}`;\n    super(`Invalid value with type ${JSON.stringify(received)} was received for ${property}. Valid ${plural ? 'types' : 'type'} for ${property} ${expectedString}.`);\n    this.name = 'PropertyTypeError';\n  }\n\n}\n\nclass PropertyRangeError extends RangeError {\n  constructor(_ref19) {\n    let {\n      property,\n      between,\n      below,\n      above,\n      received\n    } = _ref19;\n    let expectedString;\n    if (Array.isArray(between)) expectedString = `between ${between[0]} and ${between[1]}`;else if (['string', 'number'].includes(typeof below)) expectedString = `below ${below}`;else if (['string', 'number'].includes(typeof above)) expectedString = `above ${above}`;\n    super(`Invalid value ${JSON.stringify(received)} was received for ${property}. Valid range for ${property} is ${expectedString}.`);\n    this.name = 'PropertyRangeError';\n  }\n\n}\n\nfunction _optionalChain(ops) {\n  let lastAccessLHS = undefined;\n  let value = ops[0];\n  let i = 1;\n\n  while (i < ops.length) {\n    const op = ops[i];\n    const fn = ops[i + 1];\n    i += 2;\n\n    if ((op === 'optionalAccess' || op === 'optionalCall') && value == null) {\n      return undefined;\n    }\n\n    if (op === 'access' || op === 'optionalAccess') {\n      lastAccessLHS = value;\n      value = fn(value);\n    } else if (op === 'call' || op === 'optionalCall') {\n      value = fn(function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        return value.call(lastAccessLHS, ...args);\n      });\n      lastAccessLHS = undefined;\n    }\n  }\n\n  return value;\n}\n\nfunction getCheckoutData(cart) {\n  const lineItems = [];\n\n  for (const sku in cart.cartDetails) lineItems.push({\n    price: sku,\n    quantity: cart.cartDetails[sku].quantity\n  });\n\n  const options = {\n    mode: cart.mode,\n    lineItems,\n    successUrl: cart.successUrl,\n    cancelUrl: cart.cancelUrl,\n    billingAddressCollection: cart.billingAddressCollection ? 'required' : 'auto',\n    submitType: 'auto'\n  };\n\n  if (_optionalChain([cart, 'access', _ => _.allowedCountries, 'optionalAccess', _2 => _2.length])) {\n    options.shippingAddressCollection = {\n      allowedCountries: cart.allowedCountries\n    };\n  }\n\n  return options;\n}\n\nconst handleStripe = store => next => async action => {\n  const stripePublicKey = store.getState().stripe;\n  const cart = store.getState();\n  const checkout = ['cart/redirectToCheckout', 'cart/checkoutSingleItem'];\n\n  if (checkout.includes(action.type)) {\n    if (typeof stripePublicKey !== 'string') {\n      throw new PropertyTypeError({\n        property: 'stripe',\n        expected: 'string',\n        received: typeOf(stripePublicKey)\n      });\n    } else if (stripePublicKey.length === 0) {\n      throw new PropertyRangeError({\n        property: 'stripe.length',\n        above: 0,\n        received: stripePublicKey.length\n      });\n    }\n  }\n\n  if (action.type === 'cart/redirectToCheckout') {\n    const stripe = initializeStripe(stripePublicKey);\n\n    if (cart.cartMode === 'checkout-session') {\n      return stripe.redirectToCheckout({\n        sessionId: action.payload.sessionId\n      });\n    } else if (cart.cartMode === 'client-only') {\n      const checkoutData = getCheckoutData(cart);\n      return stripe.redirectToCheckout(checkoutData);\n    } else {\n      throw new PropertyValueError({\n        property: 'cartMode',\n        method: 'redirectToCheckout',\n        expected: ['client-only', 'checkout-session'],\n        received: cart.cartMode\n      });\n    }\n  } else if (action.type === 'cart/checkoutSingleItem') {\n    const stripe = initializeStripe(stripePublicKey);\n\n    if (cart.cartMode === 'client-only') {\n      const options = {\n        mode: cart.mode,\n        successUrl: cart.successUrl,\n        cancelUrl: cart.cancelUrl,\n        ...action.payload.cartItems\n      };\n      return stripe.redirectToCheckout(options);\n    } else {\n      throw new PropertyValueError({\n        property: 'cartMode',\n        method: 'checkoutSingleItem',\n        expected: 'client-only',\n        received: cart.cartMode\n      });\n    }\n  }\n\n  return next(action);\n};\n\nfunction initializeStripe(publicKey) {\n  try {\n    // eslint-disable-next-line no-undef\n    const stripe = Stripe(publicKey);\n    stripe.registerAppInfo({\n      name: 'use-shopping-cart',\n      version: \"3.1.2\",\n      url: 'https://useshoppingcart.com',\n      // eslint-disable-next-line camelcase\n      partner_id: 'pp_partner_H8MLmI3e9Oc3IK'\n    });\n    return stripe;\n  } catch (error) {\n    console.error('Unable to initialize Stripe.');\n    throw error;\n  }\n}\n\nconst handleWarnings = store => next => async action => {\n  const count = ['cart/addItem', 'cart/incrementItem', 'cart/decrementItem'];\n\n  if (count.includes(action.type) && typeof action.payload.options.count !== 'number') {\n    console.warn(`Invalid count used with action ${action.type}: count must be a number. The current type is ${typeOf(action.payload.options.count)}.`, action);\n    return;\n  }\n\n  const quantity = ['cart/setItemQuantity'];\n\n  if (quantity.includes(action.type)) {\n    if (typeof action.payload.quantity !== 'number') {\n      console.warn(`Invalid quantity used with action ${action.type}: quantity must be a number. The current type is ${typeOf(action.payload.quantity)}.`, action);\n      return;\n    } else if (action.payload.quantity < 0) {\n      console.warn(`Invalid quantity used with action ${action.type}: quantity must be greater than zero. The current value is ${JSON.stringify(action.payload.quantity)}.`, action);\n      return;\n    }\n  }\n\n  const id = ['cart/incrementItem', 'cart/decrementItem', 'cart/removeItem'];\n\n  if (id.includes(action.type) && !(action.payload.id in store.getState().cartDetails)) {\n    console.warn(`Invalid product ID used with action ${action.type}: the ID must already be in the cart. The current value is ${JSON.stringify(action.payload.id)}.`, action);\n    return;\n  }\n\n  return next(action);\n};\n\nasync function filterCart(cartDetails, filter) {\n  const filteredCart = {};\n\n  for (const sku in cartDetails) {\n    const entry = cartDetails[sku];\n    if (await filter(entry)) filteredCart[sku] = entry;\n  }\n\n  return filteredCart;\n}\n\nfunction noop() {}\n\nfunction createNoopStorage() {\n  return {\n    getItem: noop,\n    setItem: noop,\n    removeItem: noop\n  };\n}\n\nfunction createLocalStorage() {\n  return {\n    async getItem(key) {\n      return window.localStorage.getItem(key);\n    },\n\n    async setItem(key, value) {\n      return window.localStorage.setItem(key, value);\n    },\n\n    async removeItem(key) {\n      return window.localStorage.removeItem(key);\n    }\n\n  };\n}\n\nfunction createShoppingCartStore(options) {\n  if (!isClient) {\n    return configureStore({\n      reducer,\n      preloadedState: { ...initialState,\n        ...options\n      }\n    });\n  }\n\n  let storage;\n  if (isClient) storage = options.storage || createLocalStorage();else storage = createNoopStorage();\n  delete options.storage;\n  const persistConfig = {\n    key: 'root',\n    version: 1,\n    storage,\n    whitelist: ['cartCount', 'totalPrice', 'formattedTotalPrice', 'cartDetails']\n  };\n  const persistedReducer = persistReducer(persistConfig, reducer);\n  const newInitialState = { ...initialState,\n    ...options\n  };\n  updateFormattedTotalPrice(newInitialState);\n  return configureStore({\n    reducer: persistedReducer,\n    preloadedState: newInitialState,\n    middleware: getDefaultMiddleware => getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n      }\n    }).concat(handleStripe, handleWarnings)\n  });\n}\n\nconst _jsxFileName = \"/Users/nickdejesus/Code/hooks/use-shopping-cart/use-shopping-cart/react/index.js\";\nconst CartContext = React.createContext(initialState);\nconst useSelector = createSelectorHook(CartContext);\nconst useDispatch = createDispatchHook(CartContext);\n\nfunction CartProvider(_ref20) {\n  let {\n    loading = null,\n    children,\n    ...props\n  } = _ref20;\n  const store = React.useMemo(() => createShoppingCartStore(props), [props]);\n  const persistor = persistStore(store);\n  return React.createElement(Provider, {\n    context: CartContext,\n    store: store,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    }\n  }, React.createElement(PersistGate, {\n    persistor: persistor,\n    children: bootstrapped => {\n      if (!bootstrapped) return loading;\n      return children;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    }\n  }));\n}\n\nfunction useShoppingCart() {\n  let selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : state => ({ ...state\n  });\n  let equalityFn = arguments.length > 1 ? arguments[1] : undefined;\n  const dispatch = useDispatch();\n  const cartState = useSelector(selector, equalityFn);\n  const shoppingCart = React.useMemo(() => {\n    const cartActions = bindActionCreators(actions, dispatch);\n    return { ...cartState,\n      ...cartActions\n    };\n  }, [cartState, dispatch]);\n  React.useDebugValue(shoppingCart);\n  return shoppingCart;\n}\n\nfunction DebugCart(props) {\n  const cart = useShoppingCart(state => state);\n  const cartPropertyRows = Object.entries(cart).filter(_ref21 => {\n    let [, value] = _ref21;\n    return typeof value !== 'function';\n  }).map(_ref22 => {\n    let [key, value] = _ref22;\n    return React.createElement('tr', {\n      key: key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      }\n    }, React.createElement('td', {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      }\n    }, key), React.createElement('td', {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      }\n    }, typeof value === 'object' ? React.createElement('button', {\n      onClick: () => console.log(value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      }\n    }, \"Log value\") : JSON.stringify(value)));\n  });\n  return React.createElement('div', {\n    style: {\n      position: 'fixed',\n      top: 50,\n      right: 50,\n      backgroundColor: '#eee',\n      textAlign: 'left',\n      maxWidth: 300,\n      padding: 20,\n      borderSpacing: '25px 5px',\n      overflow: 'auto'\n    },\n    ...props,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    }\n  }, React.createElement('table', {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    }\n  }, React.createElement('thead', {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    }\n  }, React.createElement('tr', {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    }\n  }, React.createElement('th', {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    }\n  }, \"Key\"), React.createElement('th', {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    }\n  }, \"Value\"))), React.createElement('tbody', {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    }\n  }, cartPropertyRows)));\n}\n\nexport { CartContext, CartProvider, DebugCart, actions, filterCart, formatCurrencyString, useDispatch, useSelector, useShoppingCart };","map":{"version":3,"mappings":"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","names":["value","currency","language","style","currencyDisplay","zeroDecimalCurrency","state","id","product","quantity","price_metadata","product_metadata","price_data","product_data","count","updateFormattedValue","updateFormattedPrice","updateFormattedTotalPrice","updateEntry","cartMode","mode","lastClicked","shouldDisplayCart","cartCount","totalPrice","formattedTotalPrice","cartDetails","stripe","name","initialState","reducers","addItem","reducer","payload","options","uuidv4","createEntry","prepare","incrementItem","decrementItem","clearCart","setItemQuantity","removeItem","removeEntry","loadCart","shouldMerge","handleCartHover","handleCartClick","handleCloseCart","storeLastClicked","changeStripeKey","changeLanguage","changeCurrency","slice","type","sessionId","lineItems","price","items","sku","cartItems","actions","constructor","property","method","expected","received","plural","between","below","above","expectedString","i","lastAccessLHS","args","successUrl","cancelUrl","billingAddressCollection","submitType","allowedCountries","version","url","partner_id","console","action","getItem","setItem","preloadedState","storage","key","whitelist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","concat","handleStripe","handleWarnings","loading","children","React","context","store","__self","__source","fileName","lineNumber","persistor","selector","equalityFn","filter","map","onClick","JSON","position","top","right","backgroundColor","textAlign","maxWidth","padding","borderSpacing","overflow"],"sources":["/Users/alexdegregori/Projects/module-1/Kook-Shop/node_modules/use-shopping-cart/utilities/SSR.js","/Users/alexdegregori/Projects/module-1/Kook-Shop/node_modules/use-shopping-cart/core/Entry.js","/Users/alexdegregori/Projects/module-1/Kook-Shop/node_modules/use-shopping-cart/core/slice.js","/Users/alexdegregori/Projects/module-1/Kook-Shop/node_modules/use-shopping-cart/core/middleware/helpers.js","/Users/alexdegregori/Projects/module-1/Kook-Shop/node_modules/use-shopping-cart/core/middleware/stripe.js","/Users/alexdegregori/Projects/module-1/Kook-Shop/node_modules/use-shopping-cart/core/middleware/warnings.js","/Users/alexdegregori/Projects/module-1/Kook-Shop/node_modules/use-shopping-cart/core/index.js","/Users/alexdegregori/Projects/module-1/Kook-Shop/node_modules/use-shopping-cart/react/index.js"],"sourcesContent":["export const isClient = typeof window === 'object'\r\n","import { isClient } from '../utilities/SSR'\r\n\r\nexport const formatCurrencyString = ({\r\n  value,\r\n  currency,\r\n  language = isClient ? navigator.language : 'en-US'\r\n}) => {\r\n  const numberFormat = new Intl.NumberFormat(language, {\r\n    style: 'currency',\r\n    currency,\r\n    currencyDisplay: 'symbol'\r\n  })\r\n  const parts = numberFormat.formatToParts(value)\r\n  let zeroDecimalCurrency = true\r\n\r\n  for (const part of parts) {\r\n    if (part.type === 'decimal') {\r\n      zeroDecimalCurrency = false\r\n      break\r\n    }\r\n  }\r\n\r\n  value = zeroDecimalCurrency ? value : parseFloat((value / 100).toFixed(2))\r\n  return numberFormat.format(value)\r\n}\r\n\r\nexport function updateFormattedTotalPrice(state) {\r\n  state.formattedTotalPrice = formatCurrencyString({\r\n    value: state.totalPrice,\r\n    currency: state.currency,\r\n    language: state.language\r\n  })\r\n}\r\n\r\nexport function updateFormattedValue(state, id) {\r\n  state.cartDetails[id].formattedValue = formatCurrencyString({\r\n    value: state.cartDetails[id].value,\r\n    currency: state.currency,\r\n    language: state.language\r\n  })\r\n}\r\n\r\nexport function updateFormattedPrice(state, id) {\r\n  state.cartDetails[id].formattedPrice = formatCurrencyString({\r\n    value: state.cartDetails[id].price,\r\n    currency: state.currency,\r\n    language: state.language\r\n  })\r\n}\r\n\r\nfunction Entry({ id, product, quantity, price_metadata, product_metadata }) {\r\n  return {\r\n    ...product,\r\n    id,\r\n    quantity,\r\n    value: product.price * quantity,\r\n    price_data: {\r\n      ...product.price_data,\r\n      ...price_metadata\r\n    },\r\n    product_data: {\r\n      ...product.product_data,\r\n      ...product_metadata\r\n    }\r\n  }\r\n}\r\n\r\nexport function createEntry({\r\n  state,\r\n  id,\r\n  product,\r\n  count,\r\n  price_metadata,\r\n  product_metadata\r\n}) {\r\n  const entry = Entry({\r\n    id,\r\n    product,\r\n    quantity: count,\r\n    price_metadata,\r\n    product_metadata\r\n  })\r\n\r\n  state.cartDetails[id] = entry\r\n  updateFormattedValue(state, id)\r\n  updateFormattedPrice(state, id)\r\n\r\n  state.totalPrice += entry.value\r\n  state.cartCount += count\r\n  updateFormattedTotalPrice(state)\r\n}\r\n\r\nexport function updateEntry({\r\n  state,\r\n  id,\r\n  count,\r\n  price_metadata,\r\n  product_metadata\r\n}) {\r\n  const entry = state.cartDetails[id]\r\n  if (entry.quantity + count <= 0) return removeEntry({ state, id })\r\n\r\n  state.cartDetails[id] = Entry({\r\n    id,\r\n    state,\r\n    product: entry,\r\n    quantity: entry.quantity + count,\r\n    price_metadata,\r\n    product_metadata\r\n  })\r\n  updateFormattedValue(state, id)\r\n\r\n  state.totalPrice += entry.price * count\r\n  state.cartCount += count\r\n  updateFormattedTotalPrice(state)\r\n}\r\n\r\nexport function removeEntry({ state, id }) {\r\n  const cartDetails = state.cartDetails\r\n  state.totalPrice -= cartDetails[id].value\r\n  state.cartCount -= cartDetails[id].quantity\r\n  delete cartDetails[id]\r\n  updateFormattedTotalPrice(state)\r\n}\r\n\r\nexport function updateQuantity({ state, id, quantity }) {\r\n  const entry = state.cartDetails[id]\r\n  updateEntry({\r\n    state,\r\n    id,\r\n    count: quantity - entry.quantity\r\n  })\r\n}\r\n","import { createSlice } from '@reduxjs/toolkit'\r\nimport {\r\n  createEntry,\r\n  updateEntry,\r\n  removeEntry,\r\n  updateQuantity,\r\n  updateFormattedTotalPrice\r\n} from './Entry'\r\nimport { isClient } from '../utilities/SSR'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nexport const initialState = {\r\n  cartMode: 'checkout-session',\r\n  mode: 'payment',\r\n  currency: 'USD',\r\n  language: isClient ? navigator.language : 'en-US',\r\n  lastClicked: '',\r\n  shouldDisplayCart: false,\r\n  cartCount: 0,\r\n  totalPrice: 0,\r\n  formattedTotalPrice: '',\r\n  cartDetails: {},\r\n  stripe: ''\r\n}\r\n\r\nconst slice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n    addItem: {\r\n      reducer(state, { payload: { product, options } }) {\r\n        const { count, price_metadata, product_metadata } = options\r\n\r\n        const id =\r\n          product.id ||\r\n          product.price_id ||\r\n          product.sku_id ||\r\n          product.sku ||\r\n          uuidv4()\r\n\r\n        if (id in state.cartDetails) {\r\n          updateEntry({\r\n            state,\r\n            id,\r\n            count,\r\n            price_metadata,\r\n            product_metadata\r\n          })\r\n        } else {\r\n          createEntry({\r\n            state,\r\n            id,\r\n            product,\r\n            count,\r\n            price_metadata,\r\n            product_metadata\r\n          })\r\n        }\r\n      },\r\n      prepare(product, options = { count: 1 }) {\r\n        if (!options.price_metadata) options.price_metadata = {}\r\n        if (!options.product_metadata) options.product_metadata = {}\r\n        if (!options.count) options.count = 1\r\n        return { payload: { product, options } }\r\n      }\r\n    },\r\n    incrementItem: {\r\n      reducer(state, { payload: { id, options } }) {\r\n        updateEntry({\r\n          state,\r\n          id,\r\n          count: options.count\r\n        })\r\n      },\r\n      prepare(id, options = { count: 1 }) {\r\n        return { payload: { id, options } }\r\n      }\r\n    },\r\n    decrementItem: {\r\n      reducer(state, { payload: { id, options } }) {\r\n        if (state.cartDetails[id].quantity - options.count <= 0)\r\n          return removeEntry({ state, id })\r\n\r\n        updateEntry({\r\n          state,\r\n          id,\r\n          count: -options.count\r\n        })\r\n      },\r\n      prepare(id, options = { count: 1 }) {\r\n        return { payload: { id, options } }\r\n      }\r\n    },\r\n    clearCart: {\r\n      reducer(state) {\r\n        state.cartCount = 0\r\n        state.totalPrice = 0\r\n        state.cartDetails = {}\r\n        updateFormattedTotalPrice(state)\r\n      }\r\n    },\r\n    setItemQuantity: {\r\n      reducer(state, { payload: { id, quantity } }) {\r\n        if (quantity > 0 && id in state.cartDetails)\r\n          return updateQuantity({ ...state, state, id, quantity })\r\n        else if (quantity === 0) return removeEntry({ state, id })\r\n      },\r\n      prepare(id, quantity) {\r\n        return { payload: { id, quantity } }\r\n      }\r\n    },\r\n    removeItem: {\r\n      reducer(state, { payload: { id } }) {\r\n        removeEntry({ state, id })\r\n      },\r\n      prepare(id) {\r\n        return { payload: { id } }\r\n      }\r\n    },\r\n    loadCart: {\r\n      reducer(state, { payload: { cartDetails, shouldMerge } }) {\r\n        if (!shouldMerge) {\r\n          state.cartCount = 0\r\n          state.totalPrice = 0\r\n          state.cartDetails = {}\r\n        }\r\n\r\n        for (const id in cartDetails) {\r\n          const entry = cartDetails[id]\r\n          createEntry({\r\n            state,\r\n            id: entry.id,\r\n            product: entry,\r\n            count: entry.quantity\r\n          })\r\n        }\r\n      },\r\n      prepare(cartDetails, shouldMerge = true) {\r\n        return { payload: { cartDetails, shouldMerge } }\r\n      }\r\n    },\r\n    handleCartHover(state) {\r\n      state.shouldDisplayCart = true\r\n    },\r\n    handleCartClick(state) {\r\n      state.shouldDisplayCart = !state.shouldDisplayCart\r\n    },\r\n    handleCloseCart(state) {\r\n      state.shouldDisplayCart = false\r\n    },\r\n    storeLastClicked(state, { payload }) {\r\n      state.lastClicked = payload\r\n    },\r\n    changeStripeKey(state, { payload }) {\r\n      state.stripe = payload\r\n    },\r\n    changeLanguage(state, { payload }) {\r\n      state.language = payload\r\n    },\r\n    changeCurrency(state, { payload }) {\r\n      state.currency = payload\r\n    }\r\n  }\r\n})\r\n\r\nslice.actions.redirectToCheckout = (sessionId) => ({\r\n  type: 'cart/redirectToCheckout',\r\n  payload: { sessionId }\r\n})\r\nslice.actions.checkoutSingleItem = (itemsOrPriceId) => {\r\n  const quantity = itemsOrPriceId.quantity || 1\r\n\r\n  const cartItems = (() => {\r\n    if (typeof itemsOrPriceId === 'string') {\r\n      return {\r\n        lineItems: [\r\n          {\r\n            price: itemsOrPriceId,\r\n            quantity\r\n          }\r\n        ]\r\n      }\r\n    }\r\n    if (Object.prototype.hasOwnProperty.call(itemsOrPriceId, 'price')) {\r\n      return {\r\n        lineItems: [\r\n          {\r\n            price: itemsOrPriceId.price,\r\n            quantity\r\n          }\r\n        ]\r\n      }\r\n    }\r\n    /**\r\n     * Backward compatibility (SKU)\r\n     */\r\n    if (Object.prototype.hasOwnProperty.call(itemsOrPriceId, 'sku')) {\r\n      return {\r\n        items: [\r\n          {\r\n            sku: itemsOrPriceId.sku,\r\n            quantity\r\n          }\r\n        ]\r\n      }\r\n    }\r\n    return []\r\n  })()\r\n\r\n  return {\r\n    type: 'cart/checkoutSingleItem',\r\n    payload: {\r\n      cartItems\r\n    }\r\n  }\r\n}\r\n\r\nexport const { reducer, actions } = slice\r\n","/**\r\n * Returns the constructor name of any value.\r\n * @param {any} value\r\n * @returns string\r\n */\r\nexport function typeOf(value) {\r\n  if (value === undefined) return 'undefined'\r\n  if (value === null) return 'null'\r\n  return value.constructor.name\r\n}\r\n\r\nexport class PropertyValueError extends Error {\r\n  constructor({ property, method, expected, received }) {\r\n    const plural = Array.isArray(expected)\r\n    const expectedString = plural\r\n      ? `are ${expected.map((v) => JSON.stringify(v)).join(', ')}`\r\n      : `is ${JSON.stringify(expected)}`\r\n    const methodString = typeof method === 'string' ? ` in ${method}()` : ''\r\n    super(\r\n      `Invalid value ${JSON.stringify(\r\n        received\r\n      )} was received for ${property}. Valid ${\r\n        plural ? 'values' : 'value'\r\n      } for ${property}${methodString} ${expectedString}.`\r\n    )\r\n    this.name = 'PropertyValueError'\r\n  }\r\n}\r\n\r\nexport class PropertyTypeError extends TypeError {\r\n  constructor({ property, expected, received }) {\r\n    const plural = Array.isArray(expected)\r\n    const expectedString = plural\r\n      ? `are ${expected.map((v) => JSON.stringify(v)).join(', ')}`\r\n      : `is ${JSON.stringify(expected)}`\r\n    super(\r\n      `Invalid value with type ${JSON.stringify(\r\n        received\r\n      )} was received for ${property}. Valid ${\r\n        plural ? 'types' : 'type'\r\n      } for ${property} ${expectedString}.`\r\n    )\r\n    this.name = 'PropertyTypeError'\r\n  }\r\n}\r\n\r\nexport class PropertyRangeError extends RangeError {\r\n  constructor({ property, between, below, above, received }) {\r\n    let expectedString\r\n    if (Array.isArray(between))\r\n      expectedString = `between ${between[0]} and ${between[1]}`\r\n    else if (['string', 'number'].includes(typeof below))\r\n      expectedString = `below ${below}`\r\n    else if (['string', 'number'].includes(typeof above))\r\n      expectedString = `above ${above}`\r\n\r\n    super(\r\n      `Invalid value ${JSON.stringify(\r\n        received\r\n      )} was received for ${property}. Valid range for ${property} is ${expectedString}.`\r\n    )\r\n    this.name = 'PropertyRangeError'\r\n  }\r\n}\r\n","import '@stripe/stripe-js'\r\nimport {\r\n  typeOf,\r\n  PropertyTypeError,\r\n  PropertyValueError,\r\n  PropertyRangeError\r\n} from './helpers'\r\n\r\nexport function getCheckoutData(cart) {\r\n  const lineItems = []\r\n  for (const sku in cart.cartDetails)\r\n    lineItems.push({ price: sku, quantity: cart.cartDetails[sku].quantity })\r\n\r\n  const options = {\r\n    mode: cart.mode,\r\n    lineItems,\r\n    successUrl: cart.successUrl,\r\n    cancelUrl: cart.cancelUrl,\r\n    billingAddressCollection: cart.billingAddressCollection\r\n      ? 'required'\r\n      : 'auto',\r\n    submitType: 'auto'\r\n  }\r\n\r\n  if (cart.allowedCountries?.length) {\r\n    options.shippingAddressCollection = {\r\n      allowedCountries: cart.allowedCountries\r\n    }\r\n  }\r\n\r\n  return options\r\n}\r\n\r\nexport const handleStripe = (store) => (next) => async (action) => {\r\n  const stripePublicKey = store.getState().stripe\r\n  const cart = store.getState()\r\n\r\n  const checkout = ['cart/redirectToCheckout', 'cart/checkoutSingleItem']\r\n  if (checkout.includes(action.type)) {\r\n    if (typeof stripePublicKey !== 'string') {\r\n      throw new PropertyTypeError({\r\n        property: 'stripe',\r\n        expected: 'string',\r\n        received: typeOf(stripePublicKey)\r\n      })\r\n    } else if (stripePublicKey.length === 0) {\r\n      throw new PropertyRangeError({\r\n        property: 'stripe.length',\r\n        above: 0,\r\n        received: stripePublicKey.length\r\n      })\r\n    }\r\n  }\r\n\r\n  if (action.type === 'cart/redirectToCheckout') {\r\n    const stripe = initializeStripe(stripePublicKey)\r\n    if (cart.cartMode === 'checkout-session') {\r\n      return stripe.redirectToCheckout({\r\n        sessionId: action.payload.sessionId\r\n      })\r\n    } else if (cart.cartMode === 'client-only') {\r\n      const checkoutData = getCheckoutData(cart)\r\n      return stripe.redirectToCheckout(checkoutData)\r\n    } else {\r\n      throw new PropertyValueError({\r\n        property: 'cartMode',\r\n        method: 'redirectToCheckout',\r\n        expected: ['client-only', 'checkout-session'],\r\n        received: cart.cartMode\r\n      })\r\n    }\r\n  } else if (action.type === 'cart/checkoutSingleItem') {\r\n    const stripe = initializeStripe(stripePublicKey)\r\n\r\n    if (cart.cartMode === 'client-only') {\r\n      const options = {\r\n        mode: cart.mode,\r\n        successUrl: cart.successUrl,\r\n        cancelUrl: cart.cancelUrl,\r\n        ...action.payload.cartItems\r\n      }\r\n      return stripe.redirectToCheckout(options)\r\n    } else {\r\n      throw new PropertyValueError({\r\n        property: 'cartMode',\r\n        method: 'checkoutSingleItem',\r\n        expected: 'client-only',\r\n        received: cart.cartMode\r\n      })\r\n    }\r\n  }\r\n\r\n  return next(action)\r\n}\r\n\r\nfunction initializeStripe(publicKey) {\r\n  try {\r\n    // eslint-disable-next-line no-undef\r\n    const stripe = Stripe(publicKey)\r\n    stripe.registerAppInfo({\r\n      name: 'use-shopping-cart',\r\n      version: process.env.__buildVersion__,\r\n      url: 'https://useshoppingcart.com',\r\n      // eslint-disable-next-line camelcase\r\n      partner_id: 'pp_partner_H8MLmI3e9Oc3IK'\r\n    })\r\n    return stripe\r\n  } catch (error) {\r\n    console.error('Unable to initialize Stripe.')\r\n    throw error\r\n  }\r\n}\r\n","import { typeOf } from './helpers'\r\n\r\nexport const handleWarnings = (store) => (next) => async (action) => {\r\n  const count = ['cart/addItem', 'cart/incrementItem', 'cart/decrementItem']\r\n  if (\r\n    count.includes(action.type) &&\r\n    typeof action.payload.options.count !== 'number'\r\n  ) {\r\n    console.warn(\r\n      `Invalid count used with action ${\r\n        action.type\r\n      }: count must be a number. The current type is ${typeOf(\r\n        action.payload.options.count\r\n      )}.`,\r\n      action\r\n    )\r\n    return\r\n  }\r\n\r\n  const quantity = ['cart/setItemQuantity']\r\n  if (quantity.includes(action.type)) {\r\n    if (typeof action.payload.quantity !== 'number') {\r\n      console.warn(\r\n        `Invalid quantity used with action ${\r\n          action.type\r\n        }: quantity must be a number. The current type is ${typeOf(\r\n          action.payload.quantity\r\n        )}.`,\r\n        action\r\n      )\r\n      return\r\n    } else if (action.payload.quantity < 0) {\r\n      console.warn(\r\n        `Invalid quantity used with action ${\r\n          action.type\r\n        }: quantity must be greater than zero. The current value is ${JSON.stringify(\r\n          action.payload.quantity\r\n        )}.`,\r\n        action\r\n      )\r\n      return\r\n    }\r\n  }\r\n\r\n  const id = ['cart/incrementItem', 'cart/decrementItem', 'cart/removeItem']\r\n  if (\r\n    id.includes(action.type) &&\r\n    !(action.payload.id in store.getState().cartDetails)\r\n  ) {\r\n    console.warn(\r\n      `Invalid product ID used with action ${\r\n        action.type\r\n      }: the ID must already be in the cart. The current value is ${JSON.stringify(\r\n        action.payload.id\r\n      )}.`,\r\n      action\r\n    )\r\n    return\r\n  }\r\n\r\n  return next(action)\r\n}\r\n","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport {\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER\r\n} from 'redux-persist'\r\nimport { isClient } from '../utilities/SSR'\r\n\r\nimport { updateFormattedTotalPrice, formatCurrencyString } from './Entry'\r\nimport { reducer, actions, initialState } from './slice'\r\n\r\nimport { handleStripe } from './middleware/stripe'\r\nimport { handleWarnings } from './middleware/warnings'\r\n\r\nexport async function filterCart(cartDetails, filter) {\r\n  const filteredCart = {}\r\n\r\n  for (const sku in cartDetails) {\r\n    const entry = cartDetails[sku]\r\n    if (await filter(entry)) filteredCart[sku] = entry\r\n  }\r\n\r\n  return filteredCart\r\n}\r\n\r\nfunction noop() {}\r\nfunction createNoopStorage() {\r\n  return {\r\n    getItem: noop,\r\n    setItem: noop,\r\n    removeItem: noop\r\n  }\r\n}\r\n\r\nfunction createLocalStorage() {\r\n  return {\r\n    async getItem(key) {\r\n      return window.localStorage.getItem(key)\r\n    },\r\n    async setItem(key, value) {\r\n      return window.localStorage.setItem(key, value)\r\n    },\r\n    async removeItem(key) {\r\n      return window.localStorage.removeItem(key)\r\n    }\r\n  }\r\n}\r\n\r\nexport { reducer, actions, formatCurrencyString }\r\n\r\nexport function createShoppingCartStore(options) {\r\n  if (!isClient) {\r\n    return configureStore({\r\n      reducer,\r\n      preloadedState: { ...initialState, ...options }\r\n    })\r\n  }\r\n  let storage\r\n  if (isClient) storage = options.storage || createLocalStorage()\r\n  else storage = createNoopStorage()\r\n  delete options.storage\r\n\r\n  const persistConfig = {\r\n    key: 'root',\r\n    version: 1,\r\n    storage,\r\n    whitelist: ['cartCount', 'totalPrice', 'formattedTotalPrice', 'cartDetails']\r\n  }\r\n  const persistedReducer = persistReducer(persistConfig, reducer)\r\n\r\n  const newInitialState = { ...initialState, ...options }\r\n  updateFormattedTotalPrice(newInitialState)\r\n\r\n  return configureStore({\r\n    reducer: persistedReducer,\r\n    preloadedState: newInitialState,\r\n    middleware: (getDefaultMiddleware) =>\r\n      getDefaultMiddleware({\r\n        serializableCheck: {\r\n          ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\r\n        }\r\n      }).concat(handleStripe, handleWarnings)\r\n  })\r\n}\r\n\r\n// For non-React apps\r\nexport { persistStore as createPersistedStore } from 'redux-persist'\r\n","import * as React from 'react'\r\nimport { actions, initialState } from '../core/slice'\r\nimport {\r\n  createShoppingCartStore,\r\n  formatCurrencyString,\r\n  filterCart\r\n} from '../core/index'\r\nimport { bindActionCreators } from '@reduxjs/toolkit'\r\nimport { createDispatchHook, createSelectorHook, Provider } from 'react-redux'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport { persistStore } from 'redux-persist'\r\n\r\nexport { actions, filterCart, formatCurrencyString }\r\nexport const CartContext = React.createContext(initialState)\r\nexport const useSelector = createSelectorHook(CartContext)\r\nexport const useDispatch = createDispatchHook(CartContext)\r\n\r\nexport function CartProvider({ loading = null, children, ...props }) {\r\n  const store = React.useMemo(() => createShoppingCartStore(props), [props])\r\n  const persistor = persistStore(store)\r\n\r\n  return (\r\n    <Provider context={CartContext} store={store}>\r\n      <PersistGate\r\n        persistor={persistor}\r\n        children={(bootstrapped) => {\r\n          if (!bootstrapped) return loading\r\n          return children\r\n        }}\r\n      />\r\n    </Provider>\r\n  )\r\n}\r\n\r\nexport function useShoppingCart(\r\n  selector = (state) => ({ ...state }),\r\n  equalityFn\r\n) {\r\n  const dispatch = useDispatch()\r\n  const cartState = useSelector(selector, equalityFn)\r\n\r\n  const shoppingCart = React.useMemo(() => {\r\n    const cartActions = bindActionCreators(actions, dispatch)\r\n    return { ...cartState, ...cartActions }\r\n  }, [cartState, dispatch])\r\n\r\n  React.useDebugValue(shoppingCart)\r\n  return shoppingCart\r\n}\r\n\r\nexport function DebugCart(props) {\r\n  const cart = useShoppingCart((state) => state)\r\n  const cartPropertyRows = Object.entries(cart)\r\n    .filter(([, value]) => typeof value !== 'function')\r\n    .map(([key, value]) => (\r\n      <tr key={key}>\r\n        <td>{key}</td>\r\n        <td>\r\n          {typeof value === 'object' ? (\r\n            <button onClick={() => console.log(value)}>Log value</button>\r\n          ) : (\r\n            JSON.stringify(value)\r\n          )}\r\n        </td>\r\n      </tr>\r\n    ))\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: 'fixed',\r\n        top: 50,\r\n        right: 50,\r\n        backgroundColor: '#eee',\r\n        textAlign: 'left',\r\n        maxWidth: 300,\r\n        padding: 20,\r\n        borderSpacing: '25px 5px',\r\n        overflow: 'auto'\r\n      }}\r\n      {...props}\r\n    >\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Key</th>\r\n            <th>Value</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>{cartPropertyRows}</tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}