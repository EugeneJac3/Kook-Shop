{"ast":null,"code":"var _jsxFileName = \"/Users/alexdegregori/Projects/module-1/Kook-Shop/client/src/components/Cart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useShoppingCart } from \"use-shopping-cart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Cart() {\n  _s();\n\n  const {\n    loadCart\n  } = useShoppingCart();\n  const user = useUser(); // Make an API request to your backend in a useEffect() to retrieve your user's previous cart\n\n  useEffect(() => {\n    let cancelled = false;\n\n    async function handler() {\n      const userCartDetails = await getData(user.id);\n      if (!cancelled && userCartDetails) loadCart(userCartDetails, false);\n    }\n\n    if (user !== null && user !== void 0 && user.id) {\n      handler();\n      return () => {\n        cancelled = true;\n      };\n    }\n  }, [user]);\n  return /*#__PURE__*/_jsxDEV(DebugCart, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n} // \tconst [products, setProducts] = useState([]);\n// \tconst [cartItems, setCartItems] = useState([]);\n// \tuseEffect(() => {\n// \t\tretrieveTutorials();\n// \t}, []);\n// \tconst retrieveTutorials = () => {\n// \t\tTutorialDataService.getAll()\n// \t\t\t.then((response) => {\n// \t\t\t\tsetProducts(response.data);\n// \t\t\t\tconsole.log(response.data);\n// \t\t\t})\n// \t\t\t.catch((e) => {\n// \t\t\t\tconsole.log(e);\n// \t\t\t});\n// \t};\n// \tconst onAdd = (products) => {\n// \t\tconst exist = cartItems.find((x) => x._id === products._id);\n// \t\tif (exist) {\n// \t\t\tsetCartItems(\n// \t\t\t\tcartItems.map((x) =>\n// \t\t\t\t\tx._id === products._id ? { ...exist, qty: exist.qty + 1 } : x\n// \t\t\t\t)\n// \t\t\t);\n// \t\t} else {\n// \t\t\tsetCartItems([...cartItems, { ...products, qty: 1 }]);\n// \t\t}\n// \t};\n// \treturn (\n// \t\t<div>\n// \t\t\t<h2>Products</h2>\n// \t\t\t<div>\n// \t\t\t\t{cartItems.map((product) => (\n// \t\t\t\t\t<h3>{cartItems.name}</h3>\n// \t\t\t\t))}\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n\n_s(Cart, \"4QOlenfa9CEndRvVUsh+d/csB1k=\", true, function () {\n  return [useShoppingCart];\n});\n\n_c = Cart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cart\");","map":{"version":3,"sources":["/Users/alexdegregori/Projects/module-1/Kook-Shop/client/src/components/Cart.js"],"names":["React","useState","useEffect","useShoppingCart","Cart","loadCart","user","useUser","cancelled","handler","userCartDetails","getData","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,eAAT,QAAgC,mBAAhC;;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAeF,eAAe,EAApC;AACA,QAAMG,IAAI,GAAGC,OAAO,EAApB,CAF8B,CAI9B;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIM,SAAS,GAAG,KAAhB;;AACA,mBAAeC,OAAf,GAAyB;AACxB,YAAMC,eAAe,GAAG,MAAMC,OAAO,CAACL,IAAI,CAACM,EAAN,CAArC;AACA,UAAI,CAACJ,SAAD,IAAcE,eAAlB,EAAmCL,QAAQ,CAACK,eAAD,EAAkB,KAAlB,CAAR;AACnC;;AAED,QAAIJ,IAAJ,aAAIA,IAAJ,eAAIA,IAAI,CAAEM,EAAV,EAAc;AACbH,MAAAA,OAAO;AACP,aAAO,MAAM;AACZD,QAAAA,SAAS,GAAG,IAAZ;AACA,OAFD;AAGA;AACD,GAbQ,EAaN,CAACF,IAAD,CAbM,CAAT;AAeA,sBAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,UAAP;AACA,C,CAED;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;GAhEwBF,I;UACFD,e;;;KADEC,I","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useShoppingCart } from \"use-shopping-cart\";\n\nexport default function Cart() {\n\tconst { loadCart } = useShoppingCart();\n\tconst user = useUser();\n\n\t// Make an API request to your backend in a useEffect() to retrieve your user's previous cart\n\tuseEffect(() => {\n\t\tlet cancelled = false;\n\t\tasync function handler() {\n\t\t\tconst userCartDetails = await getData(user.id);\n\t\t\tif (!cancelled && userCartDetails) loadCart(userCartDetails, false);\n\t\t}\n\n\t\tif (user?.id) {\n\t\t\thandler();\n\t\t\treturn () => {\n\t\t\t\tcancelled = true;\n\t\t\t};\n\t\t}\n\t}, [user]);\n\n\treturn <DebugCart />;\n}\n\n// \tconst [products, setProducts] = useState([]);\n// \tconst [cartItems, setCartItems] = useState([]);\n\n// \tuseEffect(() => {\n// \t\tretrieveTutorials();\n// \t}, []);\n\n// \tconst retrieveTutorials = () => {\n// \t\tTutorialDataService.getAll()\n// \t\t\t.then((response) => {\n// \t\t\t\tsetProducts(response.data);\n// \t\t\t\tconsole.log(response.data);\n// \t\t\t})\n// \t\t\t.catch((e) => {\n// \t\t\t\tconsole.log(e);\n// \t\t\t});\n// \t};\n\n// \tconst onAdd = (products) => {\n// \t\tconst exist = cartItems.find((x) => x._id === products._id);\n// \t\tif (exist) {\n// \t\t\tsetCartItems(\n// \t\t\t\tcartItems.map((x) =>\n// \t\t\t\t\tx._id === products._id ? { ...exist, qty: exist.qty + 1 } : x\n// \t\t\t\t)\n// \t\t\t);\n// \t\t} else {\n// \t\t\tsetCartItems([...cartItems, { ...products, qty: 1 }]);\n// \t\t}\n// \t};\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<h2>Products</h2>\n\n// \t\t\t<div>\n// \t\t\t\t{cartItems.map((product) => (\n// \t\t\t\t\t<h3>{cartItems.name}</h3>\n// \t\t\t\t))}\n// \t\t\t</div>\n// \t\t</div>\n// \t);\n"]},"metadata":{},"sourceType":"module"}